generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String   @id @default(uuid())
  supabaseId String   @unique
  email      String   @unique
  fullName   String
  role       Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  doctor     Doctor?
  patient    Patient?

  @@index([supabaseId])
  @@index([email])
}

model Patient {
  id                  String          @id @default(uuid())
  supabaseId          String          @unique
  dateOfBirth         DateTime
  gender              String
  phone               String
  address             String
  medicalHistory      String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  profile_picture_url String?
  appointments        Appointment[]
  MedicalRecord       MedicalRecord[]
  user                User            @relation(fields: [supabaseId], references: [supabaseId])
  prescriptions       Prescription[]

  @@index([supabaseId])
}

model Doctor {
  id             String         @id @default(uuid())
  supabaseId     String         @unique
  specialization String
  phone          String
  address        String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  appointments   Appointment[]
  user           User           @relation(fields: [supabaseId], references: [supabaseId])
  prescriptions  Prescription[]

  @@index([supabaseId])
}

model Appointment {
  id        String            @id @default(uuid())
  patientId String
  doctorId  String
  date      DateTime
  time      String?
  type      AppointmentType   @default(IN_PERSON)
  notes     String?
  status    AppointmentStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  doctor    Doctor            @relation(fields: [doctorId], references: [id])
  patient   Patient           @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

model Prescription {
  id           String   @id @default(uuid())
  patientId    String
  doctorId     String
  medication   String
  dosage       String
  instructions String
  createdAt    DateTime @default(now())
  doctor       Doctor   @relation(fields: [doctorId], references: [id])
  patient      Patient  @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MedicalRecord {
  id          String   @id
  patientId   String
  title       String
  description String?
  fileUrl     String
  fileType    String
  fileName    String
  size        Int
  uploadedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Patient     Patient  @relation(fields: [patientId], references: [id])

  @@index([patientId])
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELED
}

enum AppointmentType {
  IN_PERSON
  ONLINE
  VIDEO_CALL
}
