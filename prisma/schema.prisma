// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  fullName   String
  role       Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  patient    Patient?
  doctor     Doctor?

  // Indexes
  @@index([email])
}

model Patient {
  id          String   @id @default(uuid())
  userId      String   @unique
  dateOfBirth DateTime
  gender      String
  phone       String
  address     String
  medicalHistory String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user        User     @relation(fields: [userId], references: [id])

  // Relations to Appointments and Prescriptions
  appointments Appointment[]
  prescriptions Prescription[]

  // Indexes
  @@index([userId])
}

model Doctor {
  id          String   @id @default(uuid())
  userId      String   @unique
  specialization String
  phone       String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user        User     @relation(fields: [userId], references: [id])

  // Relations to Appointments and Prescriptions
  appointments Appointment[]
  prescriptions Prescription[]

  // Indexes
  @@index([userId])
}

model Appointment {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String
  date        DateTime
  time        String?
  type        AppointmentType @default(IN_PERSON)
  notes       String?
  status      AppointmentStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient     Patient @relation(fields: [patientId], references: [id])
  doctor      Doctor  @relation(fields: [doctorId], references: [id])

  // Indexes
  @@index([patientId])
  @@index([doctorId])
}

model Prescription {
  id          String   @id @default(uuid())
  patientId   String
  doctorId    String
  medication  String
  dosage      String
  instructions String
  createdAt   DateTime @default(now())

  // Relations
  patient     Patient @relation(fields: [patientId], references: [id])
  doctor      Doctor  @relation(fields: [doctorId], references: [id])

  // Indexes
  @@index([patientId])
  @@index([doctorId])
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

enum AppointmentStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELED
}

enum AppointmentType {
  IN_PERSON
  ONLINE
  VIDEO_CALL
}